/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TCO2FaucetInterface extends ethers.utils.Interface {
  functions: {
    "checkEligible(address)": FunctionFragment;
    "checkIfWithdrawalTimeout()": FunctionFragment;
    "deposit(address,uint256)": FunctionFragment;
    "footprint()": FunctionFragment;
    "getTokenBalance(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "tco2Address()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkEligible",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkIfWithdrawalTimeout",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "footprint", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTokenBalance",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tco2Address",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "checkEligible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkIfWithdrawalTimeout",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "footprint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTokenBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tco2Address",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Deposited(address,uint256)": EventFragment;
    "Withdrawn(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export type DepositedEvent = TypedEvent<
  [string, BigNumber] & { erc20Addr: string; amount: BigNumber }
>;

export type WithdrawnEvent = TypedEvent<
  [string, string, BigNumber] & {
    account: string;
    erc20Addr: string;
    amount: BigNumber;
  }
>;

export class TCO2Faucet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TCO2FaucetInterface;

  functions: {
    checkEligible(
      _erc20Address: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkIfWithdrawalTimeout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deposit(
      _erc20Address: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    footprint(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTokenBalance(
      _erc20Address: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    tco2Address(overrides?: CallOverrides): Promise<[string]>;

    withdraw(
      _erc20Address: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  checkEligible(
    _erc20Address: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkIfWithdrawalTimeout(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deposit(
    _erc20Address: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  footprint(overrides?: CallOverrides): Promise<BigNumber>;

  getTokenBalance(
    _erc20Address: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  tco2Address(overrides?: CallOverrides): Promise<string>;

  withdraw(
    _erc20Address: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    checkEligible(
      _erc20Address: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkIfWithdrawalTimeout(overrides?: CallOverrides): Promise<boolean>;

    deposit(
      _erc20Address: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    footprint(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenBalance(
      _erc20Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    tco2Address(overrides?: CallOverrides): Promise<string>;

    withdraw(
      _erc20Address: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Deposited(address,uint256)"(
      erc20Addr?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { erc20Addr: string; amount: BigNumber }
    >;

    Deposited(
      erc20Addr?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { erc20Addr: string; amount: BigNumber }
    >;

    "Withdrawn(address,address,uint256)"(
      account?: null,
      erc20Addr?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; erc20Addr: string; amount: BigNumber }
    >;

    Withdrawn(
      account?: null,
      erc20Addr?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { account: string; erc20Addr: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    checkEligible(
      _erc20Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkIfWithdrawalTimeout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deposit(
      _erc20Address: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    footprint(overrides?: CallOverrides): Promise<BigNumber>;

    getTokenBalance(
      _erc20Address: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    tco2Address(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      _erc20Address: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkEligible(
      _erc20Address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkIfWithdrawalTimeout(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      _erc20Address: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    footprint(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTokenBalance(
      _erc20Address: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tco2Address(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      _erc20Address: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
